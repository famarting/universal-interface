## NOTE: This schema was generated by Graphback and should not be changed manually

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

"""
@model
@datasync(
  ttl: 5184000
)
"""
type Book {
  _id: GraphbackObjectID!
  name: String!
  author: String
}

input BookFilter {
  _id: GraphbackObjectIDInput
  name: StringInput
  author: StringInput
  and: [BookFilter!]
  or: [BookFilter!]
  not: BookFilter
}

type BookResultList {
  items: [Book]!
  offset: Int
  limit: Int
  count: Int
}

input BookSubscriptionFilter {
  and: [BookSubscriptionFilter!]
  or: [BookSubscriptionFilter!]
  not: BookSubscriptionFilter
  _id: GraphbackObjectIDInput
  name: StringInput
  author: StringInput
}

input CreateBookInput {
  name: String!
  author: String
}

scalar GraphbackObjectID

input GraphbackObjectIDInput {
  ne: GraphbackObjectID
  eq: GraphbackObjectID
  le: GraphbackObjectID
  lt: GraphbackObjectID
  ge: GraphbackObjectID
  gt: GraphbackObjectID
  in: [GraphbackObjectID!]
  between: [GraphbackObjectID!]
}

input MutateBookInput {
  _id: GraphbackObjectID!
  name: String
  author: String
}

type Mutation {
  createBook(input: CreateBookInput!): Book
  updateBook(input: MutateBookInput!): Book
  deleteBook(input: MutateBookInput!): Book
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

input PageRequest {
  limit: Int
  offset: Int
}

type Query {
  getBook(id: GraphbackObjectID!): Book
  findBooks(filter: BookFilter, page: PageRequest, orderBy: OrderByInput): BookResultList!
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  newBook(filter: BookSubscriptionFilter): Book!
  updatedBook(filter: BookSubscriptionFilter): Book!
  deletedBook(filter: BookSubscriptionFilter): Book!
}