{"version":3,"file":"index.esm.js","sources":["../../../dist/plugins/java/java/src/visitor.js","../../../dist/plugins/java/java/src/index.js"],"sourcesContent":["import { BaseVisitor, indentMultiline, indent, buildScalars, getBaseTypeNode, } from '@graphql-codegen/visitor-plugin-common';\nimport { Kind, isScalarType, isInputObjectType, isEnumType, } from 'graphql';\nimport { JAVA_SCALARS, JavaDeclarationBlock, wrapTypeWithModifiers } from '@graphql-codegen/java-common';\nexport class JavaResolversVisitor extends BaseVisitor {\n    constructor(rawConfig, _schema, defaultPackageName) {\n        super(rawConfig, {\n            enumValues: rawConfig.enumValues || {},\n            listType: rawConfig.listType || 'Iterable',\n            className: rawConfig.className || 'Types',\n            classMembersPrefix: rawConfig.classMembersPrefix || '',\n            package: rawConfig.package || defaultPackageName,\n            scalars: buildScalars(_schema, rawConfig.scalars, JAVA_SCALARS, 'Object'),\n        });\n        this._schema = _schema;\n        this._addHashMapImport = false;\n        this._addMapImport = false;\n        this._addListImport = false;\n    }\n    getImports() {\n        const allImports = [];\n        allImports.push(`java.util.List`);\n        if (this._addHashMapImport) {\n            allImports.push(`java.util.HashMap`);\n        }\n        if (this._addMapImport) {\n            allImports.push(`java.util.Map`);\n        }\n        if (this._addListImport) {\n            allImports.push(`java.util.List`);\n            allImports.push(`java.util.stream.Collectors`);\n        }\n        return allImports.map(i => `import ${i};`).join('\\n') + '\\n';\n    }\n    wrapWithClass(content) {\n        return new JavaDeclarationBlock()\n            .access('public')\n            .asKind('class')\n            .withName(this.config.className)\n            .withBlock(indentMultiline(content)).string;\n    }\n    getPackageName() {\n        return `package ${this.config.package};\\n`;\n    }\n    getEnumValue(enumName, enumOption) {\n        if (this.config.enumValues[enumName] &&\n            typeof this.config.enumValues[enumName] === 'object' &&\n            this.config.enumValues[enumName][enumOption]) {\n            return this.config.enumValues[enumName][enumOption];\n        }\n        return enumOption;\n    }\n    EnumValueDefinition(node) {\n        return (enumName) => {\n            return indent(`${this.getEnumValue(enumName, node.name.value)}`);\n        };\n    }\n    EnumTypeDefinition(node) {\n        this._addHashMapImport = true;\n        this._addMapImport = true;\n        const enumName = this.convertName(node.name);\n        const enumValues = node.values.map(enumValue => enumValue(node.name.value)).join(',\\n');\n        const enumCtor = indentMultiline(``);\n        const enumBlock = [enumValues, enumCtor].join('\\n');\n        return new JavaDeclarationBlock()\n            .access('public')\n            .asKind('enum')\n            .withComment(node.description)\n            .withName(enumName)\n            .withBlock(enumBlock).string;\n    }\n    resolveInputFieldType(typeNode) {\n        const innerType = getBaseTypeNode(typeNode);\n        const schemaType = this._schema.getType(innerType.name.value);\n        const isArray = typeNode.kind === Kind.LIST_TYPE ||\n            (typeNode.kind === Kind.NON_NULL_TYPE && typeNode.type.kind === Kind.LIST_TYPE);\n        let result;\n        if (isScalarType(schemaType)) {\n            if (this.scalars[schemaType.name]) {\n                result = {\n                    baseType: this.scalars[schemaType.name],\n                    typeName: this.scalars[schemaType.name],\n                    isScalar: true,\n                    isEnum: false,\n                    isArray,\n                };\n            }\n            else {\n                result = { isArray, baseType: 'Object', typeName: 'Object', isScalar: true, isEnum: false };\n            }\n        }\n        else if (isInputObjectType(schemaType)) {\n            const convertedName = this.convertName(schemaType.name);\n            const typeName = convertedName.endsWith('Input') ? convertedName : `${convertedName}Input`;\n            result = {\n                baseType: typeName,\n                typeName: typeName,\n                isScalar: false,\n                isEnum: false,\n                isArray,\n            };\n        }\n        else if (isEnumType(schemaType)) {\n            result = {\n                isArray,\n                baseType: this.convertName(schemaType.name),\n                typeName: this.convertName(schemaType.name),\n                isScalar: false,\n                isEnum: true,\n            };\n        }\n        else {\n            result = { isArray, baseType: 'Object', typeName: 'Object', isScalar: true, isEnum: false };\n        }\n        if (result) {\n            result.typeName = wrapTypeWithModifiers(result.typeName, typeNode, this.config.listType);\n        }\n        return result;\n    }\n    buildInputTransfomer(name, inputValueArray) {\n        this._addMapImport = true;\n        const classMembers = inputValueArray\n            .map(arg => {\n            const typeToUse = this.resolveInputFieldType(arg.type);\n            if (arg.name.value === 'interface') {\n                // forcing prefix of _ since interface is a keyword in JAVA\n                return indent(`private ${typeToUse.typeName} _${this.config.classMembersPrefix}${arg.name.value};`);\n            }\n            else {\n                return indent(`private ${typeToUse.typeName} ${this.config.classMembersPrefix}${arg.name.value};`);\n            }\n        })\n            .join('\\n');\n        const getters = inputValueArray\n            .map(arg => {\n            const typeToUse = this.resolveInputFieldType(arg.type);\n            if (arg.name.value === 'interface') {\n                // forcing prefix of _ since interface is a keyword in JAVA\n                return indent(`public ${typeToUse.typeName} get${this.convertName(arg.name.value)}() { return this._${this.config.classMembersPrefix}${arg.name.value}; }`);\n            }\n            else {\n                return indent(`public ${typeToUse.typeName} get${this.convertName(arg.name.value)}() { return this.${this.config.classMembersPrefix}${arg.name.value}; }`);\n            }\n        })\n            .join('\\n');\n        const setters = inputValueArray\n            .map(arg => {\n            const typeToUse = this.resolveInputFieldType(arg.type);\n            if (arg.name.value === 'interface') {\n                return indent(`public void set${this.convertName(arg.name.value)}(${typeToUse.typeName} _${arg.name.value}) { this._${arg.name.value} = _${arg.name.value}; }`);\n            }\n            else {\n                return indent(`public void set${this.convertName(arg.name.value)}(${typeToUse.typeName} ${arg.name.value}) { this.${arg.name.value} = ${arg.name.value}; }`);\n            }\n        })\n            .join('\\n');\n        return `public static class ${name} {\n${classMembers}\n\n  public ${name}() {}\n\n${getters}\n${setters}\n}`;\n    }\n    FieldDefinition(node) {\n        return (typeName) => {\n            if (node.arguments.length > 0) {\n                const transformerName = `${this.convertName(typeName, { useTypesPrefix: true })}${this.convertName(node.name.value, { useTypesPrefix: false })}Args`;\n                return this.buildInputTransfomer(transformerName, node.arguments);\n            }\n            return null;\n        };\n    }\n    InputObjectTypeDefinition(node) {\n        const convertedName = this.convertName(node);\n        const name = convertedName.endsWith('Input') ? convertedName : `${convertedName}Input`;\n        return this.buildInputTransfomer(name, node.fields);\n    }\n    ObjectTypeDefinition(node) {\n        const fieldsArguments = node.fields.map(f => f(node.name.value)).filter(r => r);\n        return fieldsArguments.join('\\n');\n    }\n}\n//# sourceMappingURL=visitor.js.map","import { parse, printSchema, visit } from 'graphql';\nimport { JavaResolversVisitor } from './visitor';\nimport { buildPackageNameFromPath } from '@graphql-codegen/java-common';\nimport { dirname, normalize } from 'path';\nexport const plugin = async (schema, documents, config, { outputFile }) => {\n    const relevantPath = dirname(normalize(outputFile));\n    const defaultPackageName = buildPackageNameFromPath(relevantPath);\n    const visitor = new JavaResolversVisitor(config, schema, defaultPackageName);\n    const printedSchema = printSchema(schema);\n    const astNode = parse(printedSchema);\n    const visitorResult = visit(astNode, { leave: visitor });\n    const imports = visitor.getImports();\n    const packageName = visitor.getPackageName();\n    const blockContent = visitorResult.definitions.filter(d => typeof d === 'string').join('\\n');\n    const wrappedContent = visitor.wrapWithClass(blockContent);\n    return [packageName, imports, wrappedContent].join('\\n');\n};\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":"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"}