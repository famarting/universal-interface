"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseMetadata = void 0;
const safe_evaluate_1 = require("../util/safe-evaluate");
const getDescription_1 = require("../util/getDescription");
/**
 * Parse metadata annotations.
 *
 * Examples:
 *
 * ```
 * @metadata
 * @metadata(create:false, create: "test")
 * ``
 *
 * @param {string} name - The name of the metadata to be parsed
 * @param {TypeOrDescriptionDefinition|string} definition The GraphQL definition which has the metadata to be parsed
 * @returns {any|boolean}
 */
function parseMetadata(name, definition) {
    const description = getDescription_1.getDescription(definition);
    if (!description) {
        return undefined;
    }
    if (description) {
        const annotation = `@${name}`;
        const regex = new RegExp(`${annotation}\\s*\\(.*\\)?$`);
        const lines = description.split('\n');
        let line;
        for (const rawLine of lines) {
            const trimmed = rawLine.trim();
            if (!trimmed.length) {
                continue;
            }
            if (annotation === trimmed || regex.test(trimmed)) {
                line = trimmed;
                break;
            }
        }
        if (!line) {
            return undefined;
        }
        line = line.substr(annotation.length).trim();
        if (line === '') {
            return true;
        }
        const openingTag = '(';
        const closingTag = ')';
        const maybeOwner = typeof definition === 'string' ? '' : ` on ${definition.name}`;
        if (!line.startsWith(openingTag)) {
            console.error(`Can't parse "@${name} annotation${maybeOwner}: Expected opening tag "${openingTag}"`);
        }
        const startPosition = description.indexOf(line);
        const startContent = description.substring(startPosition + 1, description.length);
        const endPosition = startContent.indexOf(')');
        if (endPosition === -1) {
            console.error(`Can't parse "@${name} annotation${maybeOwner}: Expected closing tag "${closingTag}"`);
            return undefined;
        }
        const metadataContent = startContent.substring(0, endPosition).trim();
        const enclosedContent = `{${metadataContent}}`;
        let parsedContent;
        try {
            parsedContent = safe_evaluate_1.safeEvaluate(enclosedContent);
        }
        catch (e) {
            console.error(`Can't parse "@${name}" annotation${maybeOwner}: ${e.message}`);
        }
        return parsedContent;
    }
    return undefined;
}
exports.parseMetadata = parseMetadata;
//# sourceMappingURL=parseMetadata.js.map