"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseMarker = void 0;
const safe_evaluate_1 = require("../util/safe-evaluate");
const getDescription_1 = require("../util/getDescription");
/**
 * Parse marker annotations.
 * Examples:
 * ```
 * @marker
 * @marker data
 * @marker create:false, create:"test"
 * ``
 *
 * @param {string} marker
 * @param {TypeOrDescription|string} description
 * @returns {object}
 */
function parseMarker(marker, definition) {
    const description = getDescription_1.getDescription(definition);
    if (!description) {
        return undefined;
    }
    if (description) {
        const start = `@${marker}`;
        let line = description.split('\n').map(line => line.trim())
            .find(line => line.startsWith(start));
        if (!line) {
            return undefined;
        }
        line = line.substr(start.length).trim();
        if (line === '') {
            return true;
        }
        const entries = line.split(',');
        let obj = {};
        for (const entry of entries) {
            const [key, value] = entry.split(':');
            if (key && value) {
                try {
                    obj[key.trim()] = safe_evaluate_1.safeEvaluate(value);
                }
                catch (e) {
                    console.error(`Can't parse annotation ${line}: ${e.message}`);
                }
            }
            else if (key) {
                try {
                    obj = safe_evaluate_1.safeEvaluate(key);
                }
                catch (e) {
                    console.error(`Can't parse annotation ${line}: ${e.message}`);
                }
            }
        }
        return obj;
    }
    return undefined;
}
exports.parseMarker = parseMarker;
//# sourceMappingURL=parseMarker.js.map