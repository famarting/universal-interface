import { ObjectID } from 'bson';
/**
 * Filter mapping for scalars that exit
 */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    GraphbackJSON: any;
    GraphbackJSONObject: {
        [key: string]: any;
    };
    GraphbackObjectID: ObjectID | string;
    GraphbackTimestamp: number;
    GraphbackTime: string;
    GraphbackDate: Date;
    GraphbackDateTime: Date;
};
export declare const FILTER_SUPPORTED_SCALARS: string[];
export declare type Maybe<T> = T | null;
export declare type BooleanInput = {
    ne?: Maybe<Scalars['Boolean']>;
    eq?: Maybe<Scalars['Boolean']>;
};
export declare type FloatInput = {
    ne?: Maybe<Scalars['Float']>;
    eq?: Maybe<Scalars['Float']>;
    le?: Maybe<Scalars['Float']>;
    lt?: Maybe<Scalars['Float']>;
    ge?: Maybe<Scalars['Float']>;
    gt?: Maybe<Scalars['Float']>;
    in?: Maybe<Scalars['Float'][]>;
    between?: Maybe<Scalars['Float'][]>;
};
export declare type IdInput = {
    ne?: Maybe<Scalars['ID']>;
    eq?: Maybe<Scalars['ID']>;
    le?: Maybe<Scalars['ID']>;
    lt?: Maybe<Scalars['ID']>;
    ge?: Maybe<Scalars['ID']>;
    gt?: Maybe<Scalars['ID']>;
    in?: Maybe<Scalars['ID'][]>;
};
export declare type IntInput = {
    ne?: Maybe<Scalars['Int']>;
    eq?: Maybe<Scalars['Int']>;
    le?: Maybe<Scalars['Int']>;
    lt?: Maybe<Scalars['Int']>;
    ge?: Maybe<Scalars['Int']>;
    gt?: Maybe<Scalars['Int']>;
    in?: Maybe<Scalars['Int']>;
    between?: Maybe<Scalars['Int'][]>;
};
export declare type StringInput = {
    ne?: Maybe<Scalars['String']>;
    eq?: Maybe<Scalars['String']>;
    le?: Maybe<Scalars['String']>;
    lt?: Maybe<Scalars['String']>;
    ge?: Maybe<Scalars['String']>;
    gt?: Maybe<Scalars['String']>;
    in?: Maybe<Scalars['String'][]>;
    contains?: Maybe<Scalars['String']>;
    startsWith?: Maybe<Scalars['String']>;
    endsWith?: Maybe<Scalars['String']>;
};
export declare type GraphbackDateInput = {
    ne?: Maybe<Scalars['GraphbackDate']>;
    eq?: Maybe<Scalars['GraphbackDate']>;
    le?: Maybe<Scalars['GraphbackDate']>;
    lt?: Maybe<Scalars['GraphbackDate']>;
    ge?: Maybe<Scalars['GraphbackDate']>;
    gt?: Maybe<Scalars['GraphbackDate']>;
    in?: Maybe<Scalars['GraphbackDate'][]>;
    between?: Maybe<Scalars['GraphbackDate'][]>;
};
export declare type GraphbackDateTimeInput = {
    ne?: Maybe<Scalars['GraphbackDateTime']>;
    eq?: Maybe<Scalars['GraphbackDateTime']>;
    le?: Maybe<Scalars['GraphbackDateTime']>;
    lt?: Maybe<Scalars['GraphbackDateTime']>;
    ge?: Maybe<Scalars['GraphbackDateTime']>;
    gt?: Maybe<Scalars['GraphbackDateTime']>;
    in?: Maybe<Scalars['GraphbackDateTime'][]>;
    between?: Maybe<Scalars['GraphbackDateTime'][]>;
};
export declare type GraphbackObjectIdInput = {
    ne?: Maybe<Scalars['GraphbackObjectID']>;
    eq?: Maybe<Scalars['GraphbackObjectID']>;
    le?: Maybe<Scalars['GraphbackObjectID']>;
    lt?: Maybe<Scalars['GraphbackObjectID']>;
    ge?: Maybe<Scalars['GraphbackObjectID']>;
    gt?: Maybe<Scalars['GraphbackObjectID']>;
    in?: Maybe<Scalars['GraphbackObjectID'][]>;
    between?: Maybe<Scalars['GraphbackObjectID'][]>;
};
export declare type GraphbackTimeInput = {
    ne?: Maybe<Scalars['GraphbackTime']>;
    eq?: Maybe<Scalars['GraphbackTime']>;
    le?: Maybe<Scalars['GraphbackTime']>;
    lt?: Maybe<Scalars['GraphbackTime']>;
    ge?: Maybe<Scalars['GraphbackTime']>;
    gt?: Maybe<Scalars['GraphbackTime']>;
    in?: Maybe<Scalars['GraphbackTime'][]>;
    between?: Maybe<Scalars['GraphbackTime'][]>;
};
export declare type GraphbackTimestampInput = {
    ne?: Maybe<Scalars['GraphbackTimestamp']>;
    eq?: Maybe<Scalars['GraphbackTimestamp']>;
    le?: Maybe<Scalars['GraphbackTimestamp']>;
    lt?: Maybe<Scalars['GraphbackTimestamp']>;
    ge?: Maybe<Scalars['GraphbackTimestamp']>;
    gt?: Maybe<Scalars['GraphbackTimestamp']>;
    in?: Maybe<Scalars['GraphbackTimestamp'][]>;
    between?: Maybe<Scalars['GraphbackTimestamp'][]>;
};
declare type GraphbackScalarInput = GraphbackDateInput | GraphbackDateTimeInput | GraphbackObjectIdInput | GraphbackTimeInput | GraphbackTimestampInput;
export declare type QueryFilterOperator = keyof IdInput | keyof BooleanInput | keyof StringInput | keyof FloatInput | keyof IntInput | keyof GraphbackScalarInput;
/**
 * Query filter used in Graphback services and data providers
 */
export declare type QueryFilter<T = any> = {
    [P in keyof T]: IdInput | BooleanInput | StringInput | FloatInput | IntInput | GraphbackScalarInput | any;
} & RootQuerySelector<T>;
declare type RootQuerySelector<T = any> = {
    and?: QueryFilter<T>[];
    or?: QueryFilter<T>[];
    not?: QueryFilter<T>;
};
export {};
//# sourceMappingURL=QueryFilter.d.ts.map