import { GraphbackCoreMetadata, GraphbackPlugin } from '@graphback/core';
import { ClientTemplates } from './templates/ClientTemplates';
/**
 * Configuration for client generator
 */
export interface ClientGeneratorPluginConfig {
    /**
     * Generate only fragments and skip query, mutation and subscription elements
     * This can be particulairly usefull when many custom complex queries are needed
     * but they still base on autogenerated fragments
     */
    fragmentOnly?: boolean;
    /**
     * RelativePath for the output file created by generator
     */
    outputFile: string;
}
export declare const CLIENT_CRUD_PLUGIN = "ClientCRUDPlugin";
/**
 * Graphback CRUD operations plugin
 *
 * Plugins generates client side documents containing CRUD operations:
 * Queries, Mutations and Subscriptions that reference coresponding schema and resolves.
 * Plugin operates on all types annotated with model
 *
 * Used graphql metadata:
 *
 * - model: marks type to be processed by CRUD generator
 * - crud: controls what types of operations can be generated.
 * For example crud.update: false will disable updates for type
 */
export declare class ClientCRUDPlugin extends GraphbackPlugin {
    private pluginConfig;
    constructor(pluginConfig?: ClientGeneratorPluginConfig);
    createResources(metadata: GraphbackCoreMetadata): void;
    getPluginName(): string;
    getDocuments(metadata: GraphbackCoreMetadata): ClientTemplates;
}
//# sourceMappingURL=ClientCRUDPlugin.d.ts.map