{"version":3,"file":"index.cjs.js","sources":["../../../dist/plugins/java/resolvers/src/visitor.js","../../../dist/plugins/java/resolvers/src/index.js"],"sourcesContent":["import { BaseVisitor, transformMappers, parseMapper, indent, indentMultiline, getBaseTypeNode, buildScalars, } from '@graphql-codegen/visitor-plugin-common';\nimport { JAVA_SCALARS, JavaDeclarationBlock, wrapTypeWithModifiers } from '@graphql-codegen/java-common';\nexport class JavaResolversVisitor extends BaseVisitor {\n    constructor(rawConfig, _schema, defaultPackageName) {\n        super(rawConfig, {\n            mappers: transformMappers(rawConfig.mappers || {}),\n            package: rawConfig.package || defaultPackageName,\n            defaultMapper: parseMapper(rawConfig.defaultMapper || 'Object'),\n            className: rawConfig.className || 'Resolvers',\n            listType: rawConfig.listType || 'Iterable',\n            scalars: buildScalars(_schema, rawConfig.scalars, JAVA_SCALARS, 'Object'),\n        });\n        this._includeTypeResolverImport = false;\n    }\n    getImports() {\n        const mappersImports = this.mappersImports();\n        const allImports = [...mappersImports];\n        if (this._includeTypeResolverImport) {\n            allImports.push('graphql.schema.TypeResolver');\n        }\n        allImports.push('graphql.schema.DataFetcher');\n        return allImports.map(i => `import ${i};`).join('\\n') + '\\n';\n    }\n    mappersImports() {\n        return Object.keys(this.config.mappers)\n            .map(typeName => this.config.mappers[typeName])\n            .filter((m) => m.isExternal)\n            .map(m => m.source);\n    }\n    getTypeToUse(type) {\n        if (this.scalars[type.name.value]) {\n            return this.scalars[type.name.value];\n        }\n        else if (this.config.mappers[type.name.value]) {\n            return this.config.mappers[type.name.value].type;\n        }\n        return this.config.defaultMapper.type;\n    }\n    getPackageName() {\n        return `package ${this.config.package};\\n`;\n    }\n    wrapWithClass(content) {\n        return new JavaDeclarationBlock()\n            .access('public')\n            .asKind('class')\n            .withName(this.config.className)\n            .withBlock(indentMultiline(content)).string;\n    }\n    UnionTypeDefinition(node) {\n        this._includeTypeResolverImport = true;\n        return new JavaDeclarationBlock()\n            .access('public')\n            .asKind('interface')\n            .withName(this.convertName(node.name))\n            .extends(['TypeResolver'])\n            .withComment(node.description).string;\n    }\n    InterfaceTypeDefinition(node) {\n        this._includeTypeResolverImport = true;\n        return new JavaDeclarationBlock()\n            .access('public')\n            .asKind('interface')\n            .withName(this.convertName(node.name))\n            .extends(['TypeResolver'])\n            .withComment(node.description)\n            .withBlock(node.fields.map(f => indent(f(true))).join('\\n')).string;\n    }\n    ObjectTypeDefinition(node) {\n        return new JavaDeclarationBlock()\n            .access('public')\n            .asKind('interface')\n            .withName(this.convertName(node.name))\n            .withComment(node.description)\n            .withBlock(node.fields.map(f => indent(f(false))).join('\\n')).string;\n    }\n    FieldDefinition(node, key, _parent) {\n        return (isInterface) => {\n            const baseType = getBaseTypeNode(node.type);\n            const typeToUse = this.getTypeToUse(baseType);\n            const wrappedType = wrapTypeWithModifiers(typeToUse, node.type, this.config.listType);\n            if (isInterface) {\n                return `default public DataFetcher<${wrappedType}> ${node.name.value}() { return null; }`;\n            }\n            else {\n                return `public DataFetcher<${wrappedType}> ${node.name.value}();`;\n            }\n        };\n    }\n}\n//# sourceMappingURL=visitor.js.map","import { parse, printSchema, visit } from 'graphql';\nimport { JavaResolversVisitor } from './visitor';\nimport { buildPackageNameFromPath } from '@graphql-codegen/java-common';\nimport { dirname, normalize } from 'path';\nexport const plugin = async (schema, documents, config, { outputFile }) => {\n    const relevantPath = dirname(normalize(outputFile));\n    const defaultPackageName = buildPackageNameFromPath(relevantPath);\n    const visitor = new JavaResolversVisitor(config, schema, defaultPackageName);\n    const printedSchema = printSchema(schema);\n    const astNode = parse(printedSchema);\n    const visitorResult = visit(astNode, { leave: visitor });\n    const mappersImports = visitor.getImports();\n    const packageName = visitor.getPackageName();\n    const blockContent = visitorResult.definitions.filter(d => typeof d === 'string').join('\\n');\n    const wrappedContent = visitor.wrapWithClass(blockContent);\n    return [packageName, mappersImports, wrappedContent].join('\\n');\n};\n//# sourceMappingURL=index.js.map"],"names":["BaseVisitor","transformMappers","parseMapper","buildScalars","JAVA_SCALARS","JavaDeclarationBlock","indentMultiline","indent","getBaseTypeNode","wrapTypeWithModifiers","dirname","normalize","buildPackageNameFromPath","printSchema","parse","visit"],"mappings":"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"}